Weave Scope lets you monitor and control your containerized microservices applications. By providing a visual map of your Docker Containers, you can see the dependencies and communication links between them.

Scope automatically detects processes, containers, hosts. No kernel modules, no agents, no special libraries, no coding.

This scenario explains how to map and visualise connections your Docker containers running on a Kubernetes cluster.


Step 1 - Start Kubernetes
To begin, deploy a Kubernetes cluster onto the host environment. This is a single node deployed, along with the Kubectl allowing you to run and manage services.

Execute the command below to start the cluster components and configure the host environment.

launch.sh


Step 2 - Launch Weave Scope
Weave Scope is deployed as a Pod running on the Kubernetes cluster. From here it can visualise the containers running and traffic between different containers.

You can view the configuration used to deploy Weave via curl -L https://cloud.weave.works/launch/k8s/weavescope.yaml

The configuration starts a Replication Controller and Service. It also deploys a DaemonSet. A DaemonSet automatically deploys Pods onto new hosts are deployed into the cluster. The result is you can visualise your entire network without as it changes without having to manage the Scope deployment or deploying it onto these new hosts.

Task
To deploy Scope use the yaml with kubectl. It currently requires to set the validate to false; this will be fixed in future versions of Kubernetes.

kubectl create -f 'https://cloud.weave.works/launch/k8s/weavescope.yaml'

Wait for it to be deployed by checking the status of the pods using kubectl get pods -n weave

By default, once deployed it will only be accessible from inside the cluster. You need to create a Service which exposes the port. In the command below we also expose the Service to the outside world via the external-ip parameter. Exposing the service to on a public IP is not recommended. Instead, it should require a VPN connection to access.

pod=$(kubectl get pod -n weave --selector=name=weave-scope-app -o jsonpath={.items..metadata.name})
kubectl expose pod $pod -n weave --external-ip="172.17.0.39" --port=4040 --target-port=4040


Step 3 - Visualise Cluster
With Scope and our sample application deployed we can visualise our cluster.

View Scope
Use the link below to visualise Weave Scope.

https://2886795303-4040-frugo01.environments.katacoda.com

The dashboard will highlight containers running, allow you to inspect their usage and visualise the connections between containers.
